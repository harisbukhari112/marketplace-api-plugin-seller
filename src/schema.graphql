input accountBookInput {
  AccountTitle: String
  swiftCode:String
  AccountNo:String
  isActive:Boolean
  AccountId:ID!
  AccountBookId:ID
}

type AccountBook {
  _id:ID!
  AccountTitle: String
  swiftCode:String
  AccountNo:String
  isActive:Boolean
}

input AvailableFulfillmentMethodInput {
  AccountId:ID!
  FulfillmentMethodId:ID!
  status:Boolean!
  }
  
scalar AvailableFulfillmentMethod 
type deleteOutput {
  success: Boolean
  message: String
  status: Int
}
input updatePassword {
  email: String!
  password: String!
}
type updatePasswordOutPut {
  success: Boolean
  message: String
  status: Int
}
extend type Mutation {
  deleteAccount(userId: String!): deleteOutput
  updateUserPassword(input: updatePassword): updatePasswordOutPut
  updateAccountpayBookEntry(input:accountBookInput):AccountBook
  updateAvailableFulfillmentMethodEntry(input:AvailableFulfillmentMethodInput):[AvailableFulfillmentMethod]

}


extend type Product {
  uploadedBy: uploadedBy
  upVotes: Int
  productViews: Int
  ancestorId:ID
   parentId:ID
}
extend input ProductInput {
  uploadedBy: uploadedByinput
  upVotes: Int
  productViews: Int
}

extend type CatalogProduct {
  uploadedBy: uploadedBy
  upVotes: Int
  ancestorId:ID
  parentId:ID
}
type uploadedBy {
  name:String
  image:String
  userId:ID
  FulfillmentMethods:[AvailableFulfillmentMethod]
 }
input uploadedByinput {
  name:String
  image:String
  userId:ID
}
extend type Account {
Product:[Product]
identityVerified:Boolean
orderFulfillment:[Order]
AccountBook:[AccountBook]
AvailableFulfillmentMethods:[AvailableFulfillmentMethod]
}

